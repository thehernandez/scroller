import pygame

pygame.init()  
pygame.display.set_caption("Scrolling")
screen = pygame.display.set_mode((800, 800))
clock = pygame.time.Clock()

player = [100,500,0,0] #xpos, ypos xvel,yvel
isOnGround = False
offset = 0
platforms = [(500,400),(700,300)]
desert = pygame.image.load("forest2.jpg").convert_alpha()
pygame.Surface.set_colorkey (desert, [255,255,255])
def draw_trees():
    for x in range(100, 18000,300):
        for i in range(3):
            pygame.draw.circle(screen, (110, 163, 41), (x + offset, 350,), 50)
            pygame.draw.circle(screen, (110, 163, 41), (x - 50 + offset, 400), 50)
            pygame.draw.circle(screen, (110, 163, 41), (x + 50 + offset, 400), 50)
        pygame.draw.rect(screen, (156, 86, 6), (x - 20 + offset, 350, 40, 250))
def draw_platforms():
    for i in range(len(platforms)):
        pygame.draw.rect(screen, (150,10,10),(platforms[i][0] + offset, platforms[i][1],100,30))
def move_player():
    global isOnGround
    global offset
    for i in range(len(platforms)):
        if player[0]+50>platforms[i][0]+offset and player[0]<platforms[i][0]+100+offset and player[1]+50>platforms[i][1] and player[1]+50 < platforms[i][1]+50:
            isOnGround = True
            player[1]-platforms[i][1]-50
            player[3] = 0
    if keys[pygame.K_LEFT]:
        if offset > 260 and player[0]>0: #If it's past the middle and before the left of the screen
            offset +=10 # Moves 10 opposite way
            player[2] = -5
        elif player [0]>400 and offset < -1500:
            offset -= 5
            player[2] = -5
        elif player[0]> 0:
            offset += 10
            player[2] = 0
        else:
            player[2] = 0
    elif keys[pygame.K_RIGHT]:
        if offset < -1500 and player[0]<750:
            offset -=10
            player[2] = 5
           
        elif offset > 260 and player[0]< 400:
            player[2] = 5
           
        elif player[0]<750:
            offset -= 10
            player[2] = 0
           
        else:
            player[2] = 0
    else:
        player[2] = 0
   
    #jumps ------------------------------------------
    if isOnGround == True and keys[pygame.K_UP]:
        player[3] = -15
        isOnGround = False
   
   
    if isOnGround == False:
        player[3] += 1
       

    if isOnGround == True:
        player[1] += 0
   
       
    player[0]+=player[2]
    player[1]+=player[3]

    if player[1] >= 500:
        isOnGround = True
        player[1] = 500

def draw_cloud():
    for x in range(100,8000,300):
        for i in range(3):
            pygame.draw.circle(screen,(255,255,255),(x + offset,100),40)
            pygame.draw.circle(screen,(255,255,255),(x-50 + offset,125),40)
            pygame.draw.circle(screen,(255,255,255),(x+50 + offset,125),40)
            pygame.draw.rect(screen,(255,255,255),(x-50 + offset, 100,100,65))
##def draw_tree():
    ##for x in range(100,800,400):
      ##  for i in range(3):
        ##    pygame.draw.circle(screen,(110,163,41)(x-50,600)40)
           ## pygame.draw.rect(screen,(156,86,6),(x-50,100,20,00))
         
running = True
while running:
    clock.tick(60)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
           
    keys = pygame.key.get_pressed()
    #physic -------------------------------------------------------
   
    move_player()
   
   
   
   
   
   
    #render---------------------------------------------------------
    screen.fill((135,206,235))
    screen.blit(desert,(0,0))
    draw_cloud()
    draw_trees()
    ##draw_tree()
    draw_platforms()
    pygame.draw.rect(screen,(255,0,255),(900,900,200,200))
   
    pygame.draw.rect(screen,(110,163,41),(0,550,900,950))
    pygame.draw.rect(screen,(255,0,255),(player[0],player[1],50,50,))
    print(player[0], player[1])
    pygame.display.flip()
   
   
   
   
   
   
pygame.quit()
